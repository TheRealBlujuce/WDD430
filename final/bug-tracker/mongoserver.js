const express = require('express');
const path = require('path');
const http = require('http');
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const cors = require('cors');
const mongoose = require('mongoose');
const compression = require('compression')

// Connect to MongoDB
mongoose.connect('mongodb+srv://willmarda:Icu4MongoDBAtlas@maincluster.twrdd3f.mongodb.net/Bugs', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('Connected to MongoDB');
}).catch((error) => {
  console.log('MongoDB connection error', error);
});

// Define the MongoDB schema and model
const bugSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  severity: { type: String, required: true }
});

const Bug = mongoose.model('Bug', bugSchema);

const app = express();
app.use(compression())

// Add support for CORS
app.use(cors());

// Tell express to use the following parsers for POST data
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: false
}));
app.use(cookieParser());

app.use(logger('dev')); // Tell express to use the Morgan logger

// Define the API routes

// Serve the static files generated by Angular
app.use(express.static(path.join(__dirname, 'dist/bug-tracker')));

// Redirect all non-API requests to the Angular app
app.get('*', (req, res) => {
  console.log(`Received request for URL: ${req.url}`);
  res.sendFile(path.join(__dirname, 'dist/bug-tracker/index.html'));
});

app.get('/bugposts', (req, res) => {
  Bug.find({}, (error, bugs) => {
    if (error) {
      console.log('Error retrieving bugs:', error);
      res.sendStatus(500);
    } else {
      res.json(bugs);
    }
  });
});

app.post('/bugposts', (req, res) => {
  const newBug = new Bug(req.body);
  newBug.save((error, bug) => {
    if (error) {
      console.log('Error creating bug:', error);
      res.sendStatus(500);
    } else {
      res.sendStatus(201);
    }
  });
});

app.put('/bugposts/:id', (req, res) => {
  const bugId = req.params.id;
  Bug.findByIdAndUpdate(bugId, req.body, (error, bug) => {
    if (error) {
      console.log('Error updating bug:', error);
      res.sendStatus(500);
    } else {
      res.sendStatus(200);
    }
  });
});

app.delete('/bugposts/:id', (req, res) => {
  const bugId = req.params.id;
  Bug.findByIdAndDelete(bugId, (error, bug) => {
    if (error) {
      console.log('Error deleting bug:', error);
      res.sendStatus(500);
    } else {
      res.sendStatus(200);
    }
  });
});

// Define the port address and tell express to use this port
const port = process.env.PORT || '3000';
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);

// Tell the server to start listening on the provided port
server.listen(port, () => {
  console.log(`API running on localhost: ${port}`);
});
