const express = require('express');
const path = require('path');
const http = require('http');
const bodyParser = require('body-parser');
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const cors = require('cors');
const firebase = require('firebase-admin');
var serviceAccount = require("./firebase-service-auth.json");
const compression = require('compression')

const config = {

  apiKey: "AIzaSyBK6-On6hJWOvkt246K06O9LU_zu_9UWtU",
  authDomain: "wdd430-b4295.firebaseapp.com",
  databaseURL: "https://wdd430-b4295-default-rtdb.firebaseio.com",
  projectId: "wdd430-b4295",
  storageBucket: "wdd430-b4295.appspot.com",
  messagingSenderId: "288535704920",
  appId: "1:288535704920:web:9909167c1a007006a7212d",
  credential: firebase.credential.cert(serviceAccount),

};

firebase.initializeApp(config);
const db = firebase.database();

const bugsRef = db.ref('bugs');


const app = express();
app.use(compression())
// Add support for CORS
app.use(cors());

// Tell express to use the following parsers for POST data
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: false
}));
app.use(cookieParser());

app.use(logger('dev')); // Tell express to use the Morgan logger

// Define the API routes

// Serve the static files generated by Angular
app.use(express.static(path.join(__dirname, 'dist/bug-tracker')));

// Redirect all non-API requests to the Angular app
app.get('*', (req, res) => {
  console.log(`Received request for URL: ${req.url}`);
  res.sendFile(path.join(__dirname, 'dist/bug-tracker/index.html'));
});

app.get('/bugposts', (req, res) => {
  bugsRef.once('value', (snapshot) => {
    const bugs = snapshot.val();
    res.json(bugs);
  });
});

app.post('/bugposts', (req, res) => {
  const newBugRef = bugsRef.push();
  newBugRef.set(req.body);
  res.sendStatus(201);
});

app.put('/bugposts/:id', (req, res) => {
  const bugId = req.params.id;
  const bugRef = db.ref(`bugs/${bugId}`);
  bugRef.update(req.body);
  res.sendStatus(200);
});

app.delete('/bugposts/:id', (req, res) => {
  const bugId = req.params.id;
  const bugRef = db.ref(`bugs/${bugId}`);
  bugRef.remove();
  res.sendStatus(200);
});

// Define the port address and tell express to use this port
const port = process.env.PORT || '3000';
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);

// Tell the server to start listening on the provided port
server.listen(port, () => {
  console.log(`API running on localhost: ${port}`);
});